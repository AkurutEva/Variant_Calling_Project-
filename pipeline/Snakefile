SAMPLES, = glob_wildcards("Data/reads/{sample}_read1.fq.gz")
ref_seq = "Data/reference/chr1_ref.fasta"
known_sites = "Data/knownsites/"
resource_bundle = "Data/b37/"
read1 = "Data/reads/{sample}_read1.fq.gz"
read2 = "Data/reads/{sample}_read2.fq.gz"

rule all:
    input:
        expand("analyses/final_recal_variants/{sample}_recalibrated_snp_indel.vcf", sample=SAMPLES)

rule fastqc_reports:
    input:
        read1,
	read2
    output:
        "analyses/fastqc/{sample}_read1_fastqc.html"
    log:
        "logs/fastqc/{sample}.log"
    benchmark:
        "benchmarks/fastqc/{sample}.txt"
    shell:
        "fastqc --outdir analyses/fastqc {input} 2> {log}"

rule trimming_reads:
    input:
        r1 = read1,
	r2 = read2,
        html = "analyses/fastqc/{sample}_read1_fastqc.html"
    output:
        r1 = "analyses/trimmed/{sample}_read1.paired.fastq.gz",
        r2 = "analyses/trimmed/{sample}_read2.paired.fastq.gz",
        r1_unpaired = "analyses/trimmed/{sample}_read1.unpaired.fastq.gz",
        r2_unpaired = "analyses/trimmed/{sample}_read2.unpaired.fastq.gz"
    log:
        "logs/trimming/{sample}.log"
    benchmark:
        "benchmarks/trimming/{sample}.txt"
    shell:
        "trimmomatic PE -phred33 {input.r1} {input.r2} {output.r1} {output.r1_unpaired} "
        "{output.r2} {output.r2_unpaired} ILLUMINACLIP:TruSeq3.fa:2:30:10 "
        "LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36 2> {log}"

rule bwa_index_ref:
    input:
        ref_fasta = ref_seq
    output:
        touch("analyses/check/makeidx.done")
    log:
        "logs/bwa_index/ref_index.log"
    benchmark:
        "benchmarks/bwa_index/ref_index.txt"
    shell:
        "bwa index {input.ref_fasta} 2> {log}"

rule mapping_reads:
    input:
        r1 = "analyses/trimmed/{sample}_read1.paired.fastq.gz",
        r2 = "analyses/trimmed/{sample}_read2.paired.fastq.gz",
        idxdone = "analyses/check/makeidx.done"
    output:
        "analyses/aligned/{sample}.sam"
    log:
        "logs/mapping/{sample}.log"
    benchmark:
        "benchmarks/mapping/{sample}.txt"
    threads: 8
    params:
        ref = ref_seq
    shell:
        "bwa mem -t {threads} {params.ref} {input.r1} {input.r2} > {output} 2> {log}"

rule samtools_sort:
    input:
        "analyses/aligned/{sample}.sam"
    output:
        "analyses/sorted/{sample}.bam"
    log:
        "logs/sorting/{sample}.log"
    benchmark:
        "benchmarks/sorting/{sample}.txt"
    shell:
        "samtools view -h -Sb {input} | samtools sort > {output} 2> {log}"

rule remove_duplicates:
    input:
        "analyses/sorted/{sample}.bam"
    output:
        "analyses/dedup/{sample}.bam"
    log:
        "logs/deduplicating/{sample}.log"
    benchmark:
        "benchmarks/deduplicating/{sample}.txt"
    shell:
        "sambamba markdup -r {input} {output} 2> {log}"

rule samtools_index_bam:
    input:
        "analyses/dedup/{sample}.bam"
    output:
        "analyses/dedup/{sample}.bam.bai"
    log:
        "logs/bam_index/{sample}.log"
    benchmark:
        "benchmarks/bam_index/{sample}.txt"
    shell:
        "samtools index {input} 2> {log}"

rule samtools_faidx_ref:
    input:
        ref_fasta = ref_seq
    output:
        touch("analyses/check/faidx.done")
    log:
        "logs/faidx/ref_faidx.log"
    benchmark:
        "benchmarks/faidx/ref_faidx.txt"
    shell:
        "samtools faidx {input} 2> {log}"

rule CreateSequenceDictionary:
    input:
        faidxdone = "analyses/check/faidx.done",
        ref_fasta = ref_seq
    output:
        touch("analyses/check/ref_dict.done")
    log:
        "logs/dict/ref_dict.log"
    benchmark:
        "benchmarks/dict/ref_dict.txt"
    shell:
        "gatk CreateSequenceDictionary --REFERENCE {input.ref_fasta} 2> {log}"

rule IndexFeatureFile:
    input:
        dir = known_sites
    output:
        touch("analyses/check/idxfeature.done")
    log:
        "logs/sites/feature.log"
    benchmark:
        "benchmarks/sites/feature.txt"
    shell:
        "bash Scripts/indexfeature.sh {input.dir} 2> {log}"

rule AddOrReplaceReadGroups:
    input:
        bam = "analyses/dedup/{sample}.bam",
        dedup = "analyses/dedup/{sample}.bam.bai"
    output:
        "analyses/readgroups/{sample}.bam"
    log:
        "logs/readgroups/{sample}.log"
    benchmark:
        "benchmarks/readgroups/{sample}.txt"
    shell:
        "gatk AddOrReplaceReadGroups --INPUT {input.bam}  --OUTPUT {output} "
        "-LB 00001 -PL illumina -PU 001 -SM out 2> {log}" 

rule BaseRecalibration:
    input:
        bam = "analyses/readgroups/{sample}.bam",
        ref = ref_seq,
        dir = known_sites,
        idxfeature = "analyses/check/idxfeature.done",
        dictdone = "analyses/check/ref_dict.done"
    output:
        "analyses/recalibration/{sample}_data.table"
    log:
        "logs/recalibration/{sample}.log"
    benchmark:
        "benchmarks/recalibration/{sample}.txt"
    shell:
        "bash Scripts/recalibration.sh {input.bam} {input.ref} {output} {input.dir} 2> {log}"

rule ApplyBQSR:
    input:
        recal = "analyses/recalibration/{sample}_data.table",
        bam = "analyses/readgroups/{sample}.bam",
        ref = ref_seq
    output:
        "analyses/bqsr/{sample}.bam"
    log:
        "logs/applybqsr/{sample}.log"
    benchmark:
        "benchmarks/applybqsr/{sample}.txt"
    shell:
        "gatk ApplyBQSR -R {input.ref} -I {input.bam} --bqsr-recal-file {input.recal} "
        "-O {output} 2> {log}"

rule HaplotypeCaller:
    input:
        bam = "analyses/bqsr/{sample}.bam",
        ref = ref_seq
    output:
        "analyses/variants/{sample}_called_variants.vcf"
    params:
        "-A ReadPosRankSumTest",
        "-A FisherStrand",
        "-A StrandOddsRatio",
        "-A MappingQualityRankSumTest",
        "-A QualByDepth",
        "-A InbreedingCoeff",
        "-A RMSMappingQuality",
        "--genotyping-mode DISCOVERY",
        "-stand-call-conf 10"
    log:
        "logs/haplotypeCaller/{sample}.log"
    benchmark:
        "benchmarks/haplotypeCaller/{sample}.txt"
    shell:
        "gatk HaplotypeCaller -R {input.ref} -I {input.bam} {params} -O {output} 2> {log}"

rule IndexResources:
    input:
        dir = resource_bundle
    output:
        touch("analyses/check/idxresource.done")
    log:
        "logs/resourceidx/feature.log"
    benchmark:
        "benchmarks/resourceidx/feature.txt"
    shell:
        "bash Scripts/indexfeature.sh {input.dir} 2> {log}"

rule VariantRecalibrator_SNP:
    input:
        ref = ref_seq,
        vcf = "analyses/variants/{sample}_called_variants.vcf",
        residxdone = "analyses/check/idxresource.done"
    output:
        "analyses/recal_files/snp/{sample}_called_variants.recal",
        "analyses/recal_files/snp/tranches/{sample}_called_variants_recal.tranches",
        "analyses/recal_files/snp/plots/{sample}_called_variants_recal.plot.R"
    params:
        "-resource:hapmap,known=false,training=true,truth=true,prior=15.0 Data/b37/hapmap_3.3.b37.vcf",
        "-resource:omni,known=false,training=true,truth=false,prior=12.0 Data/b37/1000G_omni2.5.b37.vcf",
        "-resource:dbsnp,known=true,training=false,truth=false,prior=2.0 Data/b37/dbsnp_138.b37.vcf",
        "-an QD -an FS -an SOR -an MQRankSum -an ReadPosRankSum -an MQ",
        "-mode SNP --max-gaussians 4"
    log:
        "logs/VariantRecalibrator/snp/{sample}.log"
    benchmark:
        "benchmarks/VariantRecalibrator/snp/{sample}.txt"
    shell:
        "gatk VariantRecalibrator -R {input.ref} -V {input.vcf} -O {output[0]} "
        "{params} --tranches-file {output[1]} --rscript-file {output[2]} 2> {log}"

rule ApplyVQSR_SNP:
    input:
        ref = ref_seq,
        vcf = "analyses/variants/{sample}_called_variants.vcf",
        recal = "analyses/recal_files/snp/{sample}_called_variants.recal"
    output:
        "analyses/recal_variants/{sample}_recalibrated_snp.vcf"
    params:
        "--ts-filter-level 99.5",
        "--tranches-file analyses/recal_files/snp/tranches/{sample}_called_variants_recal.tranches",
        "-mode SNP"
    log:
        "logs/applyVQSR/snp/{sample}.log"
    benchmark:
        "benchmarks/applyVQSR/snp/{sample}.txt"
    shell:
        "gatk ApplyVQSR -R {input.ref} -V {input.vcf} -O {output} "
        "{params} --recal-file {input.recal} 2> {log}"

rule VariantRecalibrator_Indel:
    input:
        ref = ref_seq,
        vcf = "analyses/recal_variants/{sample}_recalibrated_snp.vcf",
    output:
        "analyses/recal_files/indel/{sample}_called_variants.recal",
        "analyses/recal_files/indel/tranches/{sample}_called_variants_recal.tranches",
        "analyses/recal_files/indel/plots/{sample}_called_variants_recal.plot.R"
    params:
        "-resource:mills,known=false,training=true,truth=true,prior=12.0 Data/b37/Mills_and_1000G_gold_standard.indels.b37.vcf",
        "-resource:dbsnp,known=true,training=false,truth=false,prior=2.0 Data/b37/dbsnp_138.b37.vcf",
        "-an QD -an FS -an SOR -an MQRankSum -an ReadPosRankSum",
        "-mode INDEL --max-gaussians 4"
    log:
        "logs/VariantRecalibrator/indel/{sample}.log"
    benchmark:
        "benchmarks/VariantRecalibrator/indel/{sample}.txt"
    shell:
        "gatk VariantRecalibrator -R {input.ref} -V {input.vcf} -O {output[0]} "
        "{params} --tranches-file {output[1]} --rscript-file {output[2]} 2> {log}"

rule ApplyVQSR_indel:
    input:
        ref = ref_seq,
        vcf = "analyses/recal_variants/{sample}_recalibrated_snp.vcf",
        recal = "analyses/recal_files/indel/{sample}_called_variants.recal"
    output:
        "analyses/final_recal_variants/{sample}_recalibrated_snp_indel.vcf"
    params:
        "--ts-filter-level 99.0",
        "--tranches-file analyses/recal_files/indel/tranches/{sample}_called_variants_recal.tranches",
        "-mode INDEL"
    log:
        "logs/applyVQSR/indel/{sample}.log"
    benchmark:
        "benchmarks/applyVQSR/indel/{sample}.txt"
    shell:
        "gatk ApplyVQSR -R {input.ref} -V {input.vcf} -O {output} "
        "{params} --recal-file {input.recal} 2> {log}"
